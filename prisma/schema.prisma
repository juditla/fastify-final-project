generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Studio {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(30)
  address    String   @db.VarChar(50)
  city       String   @default("Vienna") @db.VarChar(30)
  postalCode Int      @map("postal_code")
  longitude  String?  @db.VarChar(30)
  latitude   String?  @db.VarChar(30)
  ownerId    Int      @map("owner_id")
  artist     Artist[]
  owner      User     @relation(fields: [ownerId], references: [id])

  @@unique([name, address, postalCode])
}

model Artist {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(30)
  style        String
  description  String
  studioId     Int?           @map("studio_id")
  userId       Int            @unique @map("user_id")
  studio       Studio?        @relation(fields: [studioId], references: [id])
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studioImages StudioImages[]
  tattooImages TattooImages[]
}

model TattooImages {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(30)
  picture    String   @db.VarChar(100)
  picturePublicId          String?        @db.VarChar(30) @map("picture_public_id")
  artistId   Int      @map("artist_id")
  style      String
  isWannado  Boolean  @map("is_wannado")
  isReserved Boolean  @map("is_reserved")
  isDone     Boolean  @map("is_done")
  artist     Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createDate DateTime @default(now()) @map("create_date") @db.Timestamp()

  @@map("Tattoo_Images")
}

model StudioImages {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(30)
  picture    String   @db.VarChar(100)
  picturePublicId          String?        @db.VarChar(30)@map("picture_public_id")
  studioId   Int @map("studio_id")
  studio     Artist   @relation(fields: [studioId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createDate DateTime @default(now()) @map("create_date") @db.Timestamp()

  @@map("Studio_Images")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(30)
  user User[]
}

model User {
  id                      Int            @id @default(autoincrement())
  email                   String         @unique
  roleId                  Int            @default(2) @map("role_id")
  createDate              DateTime       @default(now()) @map("create_date") @db.Timestamp()
  firstName               String         @map("first_name") @db.VarChar(30)
  lastName                String         @map("last_name") @db.VarChar(30)
  password                String         @db.VarChar(60)
  avatar                  String?         @db.VarChar(100)
  avatarPublicId          String?        @db.VarChar(30) @map("avatar_public_id")
  artist                  Artist?
  studio                  Studio[]
  role                    Role           @relation(fields: [roleId], references: [id])
  Session                 Session[]
  conversationOwner       Conversation[] @relation("ConversationOwner")
  conversationParticipant Conversation[] @relation("ConversationParticipant")
  message                 Message[]
}

model Session {
  id              Int      @id @default(autoincrement())
  token           String   @unique @db.VarChar(150)
  expiryTimestamp DateTime @default(dbgenerated("NOW() + interval '24 hours'")) @map("expiry_timestamp") @db.Timestamp(3)
  userId          Int      @map("user_id")
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Conversation {
  id            Int       @id @default(autoincrement())
  ownerId       Int       @map("owner_id")
  owner         User      @relation("ConversationOwner", fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  participantId Int       @map("participant_id")
  participant   User      @relation("ConversationParticipant", fields: [participantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createDate    DateTime  @default(now()) @map("create_date") @db.Timestamp()
  message       Message[]
  @@unique([ownerId, participantId])
}

model Message {
  id             Int          @id @default(autoincrement())
  createDate     DateTime     @default(now()) @map("create_date") @db.Timestamp()
  conversationId Int          @map("conversation_id")
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  text        String
  senderId       Int          @map("sender_id")
  sender         User         @relation(fields: [senderId], references: [id])
}
